# -*- coding: utf-8 -*-
import vklogic as vkl
import vkrequests as vkr
from utils import parse_input

from threading import Thread
import random
import requests
import time
import json
import re
import math

__version__ = '0.0.5'
__author__ = 'Eugene Ershov - https://vk.com/fogapod'
__source__ = 'https://github.com/Fogapod/ChatBot/tree/qpy2.7'
	
__info__ = '''
–í–µ—Ä—Å–∏—è: {ver}-demo
(demo –≤–µ—Ä—Å–∏—è –Ω–µ –º–æ–∂–µ—Ç –≤–µ—Å—Ç–∏ –¥–∏–∞–ª–æ–≥)

–Ø —É–º–µ—é:
*–ì–æ–≤–æ—Ä–∏—Ç—å —Ç–æ, —á—Ç–æ –≤—ã –ø–æ–ø—Ä–æ—Å–∏—Ç–µ
(/say ... |/—Å–∫–∞–∂–∏ ... )
*–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
(/calculate ... |/–ø–æ—Å—á–∏—Ç–∞–π ... )
*–í—ã–∑—ã–≤–∞—Ç—å –ø–æ–º–æ—â—å
(/help |/–ø–æ–º–æ—â—å )
*–í–µ—Å—Ç–∏ –¥–∏–∞–ª–æ–≥
(/... )

–í –∫–æ–Ω—Ü–µ –º–æ–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å—Ç–∞–≤–∏—Ç—Å—è –∑–Ω–∞–∫ –≤–µ—Ä—Ö–Ω–µ–π –∫–∞–≤—ã—á–∫–∏'

–ê–≤—Ç–æ—Ä: {author}
–ú–æ–π –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥: {source}
'''.format(\
	ver = __version__, author = __author__, source = __source__
)

# qpy
import logging
logging.captureWarnings(True)
import sys
reload(sys)
sys.setdefaultencoding('utf-8')
p = '/storage/emulated/0/'
# qpy

class LongPollSession(object):
    def __init__(self, client):
        self.client = client
        self.mlpd = mlpd = None # message_long_poll_data
        #{
        #   server: str,
        #   key: int,
        #   ts: int
        #}
        self.last_rnd_id = 0
        self.reply_count = 0
        self.message_long_poll_url = self._make_message_long_poll_url()
        self.run_message_long_poll_process = True
        self.message_long_poll_process = Thread(target=self._listen_message_long_poll)
        self.message_long_poll_response = None
        self.SELF_ID = vkr.get_self_id()
        self.exiting_text = '–ó–∞–≤–µ—Ä—à–∞—é –ø—Ä–æ–≥—Ä–∞–º–º—É'

    def __exit__(self):
        self.run_message_long_poll_process = False
        self.message_long_poll_response = []
        exit()
        
    def _make_message_long_poll_url(self, keep_ts=False):
        """
        :keep_ts:
            –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ ts, –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —Å–æ–±—ã—Ç–∏—è {ts: 12345, updates: []} (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –≤—Å–µ –ø–æ–ª—è mlpd –∑–∞–ø–æ–ª–Ω–µ–Ω—ã)
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: –≥–æ—Ç–æ–≤—ã–π url –¥–ª—è –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∏—è long poll –∑–∞–ø—Ä–æ—Å–∞
        """
        if keep_ts:
            self.mlpd['ts'] = keep_ts
        else: 
            self.mlpd = vkr.get_message_long_poll_data()

        if self.mlpd:
            url_pattern = 'https://{server}?act={act}&key={key}&ts={ts}&wait={w}&mode={m}&version={v}'
            url = url_pattern.format(
                server = self.mlpd['server'],
                key = self.mlpd['key'],
                ts = self.mlpd['ts'],
                act = 'a_check',
                w = 100,
                m = 130,
                v = 1
            )
            return url


    def _listen_message_long_poll(self):
        """
        –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è (–Ω—É–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–º –ø–æ—Ç–æ–∫–æ–º)
        –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è –º–µ–Ω—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π message_long_poll_response —Å None –Ω–∞ –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞
        """
        print('{decor}{txt}{decor}'.format(decor='-'*6, txt='Listening long poll'))

        while self.run_message_long_poll_process:
            if not self.message_long_poll_response:
                self.message_long_poll_response = vkr.do_message_long_poll_request(url=self.message_long_poll_url)
            else:
                # –ø—Ä–æ—à–ª—ã–π –æ—Ç–≤–µ—Ç –µ—â—ë –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
                time.sleep(0.01)

    def process_updates(self):
        print (__info__)
        self.message_long_poll_process.start()
        while True:
            if not self.message_long_poll_response:
                time.sleep(0.1)
                continue

            response = json.loads(self.message_long_poll_response.content)
            self.message_long_poll_url = self._make_message_long_poll_url(keep_ts=response['ts'])
            self.message_long_poll_response = None

            print(response)

            for update in response['updates']:
                if  update[0] == 4 and\
                    update[8] != self.last_rnd_id and\
                    update[6] != '':
                # response == message
                # message != last_message
                # message != ''
                    text = update[6]
                    mark_msg = True
                else:
                    continue

                if  text.lower() == '–µ—Ä—à–æ–≤' or\
                    text.lower() == '–∂–µ–Ω—è' or\
                    text.lower() == '–∂–µ–Ω—å' or\
                    text.lower() == '–∂–µ–Ω—å–∫–∞' or\
                    text.lower() == '–∂–µ–∫–∞' or\
                    text.lower() == '–µ–≤–≥–µ–Ω–∏–π' or\
                    text.lower() == '–µ—Ä—à' or\
                    text.lower() == '–µ–≤–≥–µ—Ö–∞' or\
                    text.lower() == '–∂—ç–∫–∞':
                    text = '–ê'

                elif text.lower() == 'how to praise the sun?' or\
                     text.lower() == 'üåû':
                    text = '\\[T]/\n..üåû\n...||\n'

                elif re.sub('^( )*', '', text).startswith('/'):	
                    text = text[1:]
                    if text.startswith('/'):
                        mark_msg = False
                        text = text[1:]

                    text = parse_input(text, replace_vkurl=False, replace_nl=False)
                    words = text.split()

                    if not words: 
                        words = ' '

                    if  re.match(u'^((help)|(–ø–æ–º–æ—â—å)|(info)|(–∏–Ω—Ñ–æ)|(–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)|\?)',\
                        words[0].lower()):
                        text = __info__
						
                    elif re.match(u'^((—Å–∫–∞–∂–∏)|(say))', words[0].lower()):
                        del words[0]
                        text = ''.join(words)
						
                    elif re.match(u'^((–ø–æ—Å—á–∏—Ç–∞–π)|(calculate))', words[0].lower()):
                        del words[0]
                        words = ''.join(words).lower()
                        if not re.match(u'[^\d+\-*/:().,^‚àöœÄe]', words) or re.match('(sqrt\(\d+\))|(pi)', words):
                            words = ' ' + words + ' '
                            words = re.sub(',', '.', words)
                            words = re.sub(':', '/', words)
                            while True:
                                index = re.search('[^.\d]\d+[^.\de]', words)
                                if index:
                                    index = index.end() - 1
                                    words = words[:index] + '.' + words[index:]
                                else:
                                    break
                            words = re.sub(u'(sqrt)|‚àö', 'math.sqrt', words)
                            words = re.sub(u'(pi)|œÄ', 'math.pi', words)
                            words = re.sub('\^', '**', words)
                            print words
                            try:
                                text = str(eval(words))
                            except SyntaxError:
                                text = '–û—à–∏–±–∫–∞ [0]'
                            except NameError:
                                text = '–û—à–∏–±–∫–∞ [1]'
                            except AttributeError:
                                text = '–û—à–∏–±–∫–∞ [2]'        
                            except ZeroDivisionError:
                                text = '–î–µ–ª–µ–Ω–∏–µ –Ω–∞ 0'
                            except OverflowError:
                                text = '–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç'
                        else:
                            text = '–ù–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è'
                    
                    elif re.match('stop', text.lower()):
                        if update[2] == 1 or int(update[7]['from']) == self.SELF_ID:
                            text = self.exiting_text
                        else:
                            text = '–î–æ—Å—Ç—É–ø –∫ –∫–æ–º–∞–Ω–¥–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω'
                    
                    else:
                        text = '–ü–æ–ø–∫–∞ –º–æ–ª–æ–¥–µ—Üüêî' if random.randint(0,1) else '–ü–æ–ø–∫–∞ –¥—É—Ä–∞–∫üêî'
                        text = '–ü–æ–ø–∫–∞ —É–º–µ–µ—Ç —Å—á–∏—Ç–∞—Ç—å –ª—É—á—à–µ —Ç–µ–±—è üêî' if random.randint(0,1) and random.randint(0,1) and  random.randint(0,1) else text

                else:
                    continue
				
                if update[5] != ' ... ':
                    resend_message = update[1]
                else:
                    resend_message = None

                self.last_rnd_id = update[8] + 3
                self.client.reply(
                    uid = update[3],
                    text = text + "'" if mark_msg else text,
                    forward = resend_message,
                    rnd_id = self.last_rnd_id
                    )
                self.reply_count += 1
                if text == self.exiting_text:
                    self.__exit__()

def main():
    client = vkl.Client()
	
    while not client.authorization():
        continue

    client.save_full_message_history()
    
    session = LongPollSession(client=client)
    session.process_updates()

if __name__ == '__main__':
    main()
